[@ocaml.warning "-38-32"];

module Raw = {
  include Prelude.Fresh(
            String,
            {},
          );
  let length = x => String.length @@ project(x);
  let is_empty = x => "" == project(x);
};

type elem =
  | Tag((string, list((string, Raw.t))))
  | Script((list((string, Raw.t)), string)) /* attributes and contents. TODO investigate script contents encoding */
  | Style((list((string, Raw.t)), string))
  | Text(Raw.t)
  | Close(string);

type ctx = {mutable lnum: int};

let get_lnum = ctx => ctx.lnum;

let init = () => {lnum: 1};

let _htmlstream_trans_keys: array(int) = (
  Array.concat([
    [|
      10,
      60,
      10,
      60,
      0,
      122,
      10,
      10,
      10,
      122,
      10,
      45,
      10,
      45,
      10,
      45,
      10,
      62,
      10,
      122,
      0,
      122,
      0,
      122,
      0,
      122,
      0,
      122,
      0,
      62,
      0,
      62,
      10,
      60,
      10,
      34,
      10,
      34,
      0,
      122,
      10,
      62,
      10,
      39,
      10,
      39,
      0,
      122,
      0,
      122,
      0,
      122,
      0,
      122,
      0,
      62,
      10,
      60,
      0,
      62,
      0,
      62,
      10,
      60,
      10,
      34,
      10,
      34,
      0,
      122,
      10,
      39,
      10,
      39,
      0,
      122,
      10,
      62,
      10,
      122,
      10,
      122,
      10,
      60,
      10,
      60,
      0,
      60,
      0,
      115,
      10,
      99,
      10,
      114,
      10,
      105,
      10,
      112,
      10,
      116,
      0,
      62,
      10,
      10,
      10,
      60,
      10,
      60,
      0,
      60,
      0,
      115,
      10,
      116,
      10,
      121,
      10,
      108,
      10,
      101,
      0,
      62,
      10,
      10,
      10,
      62,
      10,
      10,
      0,
    |],
  ]):
    array(int)
);

let _htmlstream_key_spans: array(int) = (
  Array.concat([
    [|
      51,
      51,
      123,
      1,
      113,
      36,
      36,
      36,
      53,
      113,
      123,
      123,
      123,
      123,
      63,
      63,
      51,
      25,
      25,
      123,
      53,
      30,
      30,
      123,
      123,
      123,
      123,
      63,
      51,
      63,
      63,
      51,
      25,
      25,
      123,
      30,
      30,
      123,
      53,
      113,
      113,
      51,
      51,
      61,
      116,
      90,
      105,
      96,
      103,
      107,
      63,
      1,
      51,
      51,
      61,
      116,
      107,
      112,
      99,
      92,
      63,
      1,
      53,
      1,
    |],
  ]):
    array(int)
);

let _htmlstream_index_offsets: array(int) = (
  Array.concat([
    [|
      0,
      52,
      104,
      228,
      230,
      344,
      381,
      418,
      455,
      509,
      623,
      747,
      871,
      995,
      1119,
      1183,
      1247,
      1299,
      1325,
      1351,
      1475,
      1529,
      1560,
      1591,
      1715,
      1839,
      1963,
      2087,
      2151,
      2203,
      2267,
      2331,
      2383,
      2409,
      2435,
      2559,
      2590,
      2621,
      2745,
      2799,
      2913,
      3027,
      3079,
      3131,
      3193,
      3310,
      3401,
      3507,
      3604,
      3708,
      3816,
      3880,
      3882,
      3934,
      3986,
      4048,
      4165,
      4273,
      4386,
      4486,
      4579,
      4643,
      4645,
      4699,
    |],
  ]):
    array(int)
);

let _htmlstream_indicies: array(int) = (
  Array.concat([
    [|
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      2,
      0,
      4,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      5,
      3,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      7,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      8,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      9,
      6,
      10,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      6,
      6,
      6,
      6,
      11,
      6,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      6,
      6,
      6,
      6,
      9,
      6,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      9,
      6,
      13,
      12,
      14,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      15,
      6,
      6,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      6,
      6,
      6,
      6,
      6,
      6,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      6,
      14,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      17,
      6,
      18,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      19,
      17,
      18,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      20,
      17,
      18,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      20,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      17,
      21,
      17,
      14,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      22,
      6,
      6,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      6,
      6,
      6,
      6,
      6,
      6,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      6,
      6,
      6,
      6,
      22,
      6,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      6,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      24,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      23,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      22,
      6,
      6,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      6,
      6,
      6,
      25,
      26,
      6,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      6,
      6,
      6,
      6,
      22,
      6,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      22,
      6,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      28,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      27,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      29,
      6,
      6,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      6,
      6,
      6,
      30,
      31,
      6,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      6,
      6,
      6,
      6,
      29,
      6,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      29,
      6,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      33,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      34,
      6,
      6,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      6,
      6,
      35,
      36,
      37,
      6,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      6,
      6,
      6,
      6,
      34,
      6,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      34,
      6,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      39,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      38,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      40,
      6,
      6,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      6,
      6,
      41,
      42,
      43,
      6,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      6,
      6,
      6,
      6,
      40,
      6,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      6,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      45,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      41,
      44,
      46,
      44,
      44,
      44,
      44,
      47,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      6,
      44,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      50,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      49,
      48,
      6,
      48,
      48,
      48,
      48,
      6,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      51,
      48,
      53,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      52,
      54,
      52,
      56,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      55,
      57,
      55,
      59,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      58,
      60,
      58,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      62,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      61,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      40,
      6,
      6,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      6,
      6,
      6,
      42,
      43,
      6,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      6,
      6,
      6,
      6,
      40,
      6,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      6,
      14,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      30,
      6,
      64,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      63,
      57,
      63,
      66,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      65,
      60,
      65,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      68,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      67,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      69,
      6,
      70,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      6,
      6,
      6,
      71,
      6,
      6,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      6,
      6,
      6,
      6,
      69,
      6,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      69,
      6,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      73,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      72,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      74,
      6,
      75,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      6,
      6,
      6,
      76,
      6,
      6,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      6,
      6,
      6,
      6,
      74,
      6,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      74,
      6,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      78,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      77,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      79,
      6,
      80,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      6,
      6,
      81,
      82,
      6,
      6,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      6,
      6,
      6,
      6,
      79,
      6,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      79,
      6,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      84,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      83,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      85,
      6,
      86,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      6,
      6,
      87,
      88,
      6,
      6,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      6,
      6,
      6,
      6,
      85,
      6,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      6,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      89,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      75,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      90,
      6,
      92,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      91,
      93,
      91,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      95,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      87,
      94,
      96,
      94,
      94,
      94,
      94,
      97,
      94,
      94,
      94,
      94,
      94,
      94,
      94,
      94,
      94,
      94,
      94,
      94,
      94,
      94,
      94,
      94,
      94,
      94,
      94,
      94,
      94,
      94,
      6,
      94,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      100,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      99,
      98,
      6,
      98,
      98,
      98,
      98,
      6,
      98,
      98,
      98,
      98,
      98,
      98,
      98,
      98,
      98,
      98,
      98,
      98,
      98,
      98,
      98,
      98,
      98,
      98,
      98,
      98,
      98,
      98,
      101,
      98,
      103,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      102,
      104,
      102,
      106,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      105,
      107,
      105,
      109,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      108,
      110,
      108,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      112,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      111,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      85,
      6,
      86,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      6,
      6,
      6,
      88,
      6,
      6,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      6,
      6,
      6,
      6,
      85,
      6,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      85,
      6,
      114,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      113,
      107,
      113,
      116,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      115,
      110,
      115,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      119,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      118,
      117,
      117,
      117,
      117,
      117,
      117,
      117,
      117,
      117,
      117,
      117,
      117,
      120,
      117,
      117,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      117,
      117,
      117,
      121,
      117,
      117,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      117,
      117,
      117,
      117,
      120,
      117,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      120,
      117,
      123,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      122,
      21,
      122,
      125,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      124,
      126,
      124,
      124,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      124,
      124,
      124,
      127,
      124,
      124,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      124,
      124,
      124,
      124,
      126,
      124,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      126,
      124,
      14,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      6,
      6,
      6,
      6,
      6,
      6,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      6,
      129,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      128,
      130,
      128,
      132,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      133,
      131,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      135,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      134,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      136,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      133,
      131,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      137,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      136,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      133,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      138,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      138,
      131,
      132,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      133,
      131,
      131,
      131,
      131,
      131,
      131,
      139,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      139,
      131,
      132,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      133,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      140,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      140,
      131,
      132,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      133,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      141,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      141,
      131,
      132,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      133,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      142,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      142,
      131,
      132,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      133,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      143,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      143,
      131,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      144,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      143,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      131,
      133,
      131,
      145,
      131,
      147,
      146,
      149,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      148,
      150,
      148,
      152,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      153,
      151,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      155,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      154,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      156,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      153,
      151,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      157,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      156,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      153,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      158,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      158,
      151,
      152,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      153,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      159,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      159,
      151,
      152,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      153,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      160,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      160,
      151,
      152,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      153,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      161,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      161,
      151,
      152,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      153,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      162,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      162,
      151,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      163,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      162,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      151,
      153,
      151,
      164,
      151,
      166,
      165,
      168,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      167,
      169,
      167,
      171,
      170,
      0,
    |],
  ]):
    array(int)
);

let _htmlstream_trans_targs: array(int) = (
  Array.concat([
    [|
      1,
      1,
      2,
      1,
      1,
      2,
      3,
      2,
      4,
      23,
      37,
      40,
      3,
      3,
      3,
      5,
      9,
      6,
      6,
      7,
      8,
      0,
      10,
      11,
      11,
      16,
      20,
      11,
      11,
      12,
      16,
      20,
      13,
      13,
      12,
      14,
      16,
      20,
      13,
      13,
      12,
      14,
      16,
      20,
      15,
      14,
      17,
      21,
      15,
      11,
      11,
      16,
      1,
      1,
      2,
      18,
      18,
      19,
      18,
      18,
      19,
      11,
      11,
      22,
      22,
      22,
      22,
      24,
      24,
      23,
      27,
      31,
      24,
      24,
      25,
      27,
      31,
      26,
      26,
      25,
      27,
      29,
      31,
      26,
      26,
      25,
      27,
      29,
      31,
      27,
      28,
      1,
      1,
      2,
      30,
      29,
      32,
      35,
      30,
      24,
      24,
      31,
      1,
      1,
      2,
      33,
      33,
      34,
      33,
      33,
      34,
      24,
      24,
      36,
      36,
      36,
      36,
      38,
      37,
      37,
      39,
      0,
      38,
      38,
      38,
      38,
      39,
      0,
      42,
      42,
      43,
      42,
      42,
      43,
      43,
      43,
      44,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      50,
      51,
      51,
      51,
      53,
      53,
      54,
      53,
      53,
      54,
      54,
      54,
      55,
      55,
      56,
      57,
      58,
      59,
      60,
      60,
      61,
      61,
      61,
      62,
      62,
      63,
      63,
      63,
    |],
  ]):
    array(int)
);

let _htmlstream_trans_actions: array(int) = (
  Array.concat([
    [|
      1,
      2,
      0,
      0,
      4,
      3,
      5,
      4,
      6,
      7,
      6,
      6,
      0,
      4,
      8,
      0,
      1,
      0,
      4,
      0,
      0,
      0,
      0,
      9,
      10,
      9,
      9,
      0,
      4,
      1,
      0,
      0,
      11,
      12,
      0,
      11,
      13,
      13,
      0,
      4,
      14,
      0,
      15,
      15,
      1,
      4,
      0,
      0,
      0,
      16,
      17,
      16,
      19,
      20,
      18,
      1,
      2,
      21,
      0,
      4,
      22,
      15,
      23,
      1,
      2,
      0,
      4,
      24,
      25,
      0,
      24,
      24,
      0,
      4,
      1,
      0,
      0,
      11,
      12,
      0,
      13,
      11,
      13,
      0,
      4,
      14,
      15,
      0,
      15,
      4,
      0,
      27,
      28,
      26,
      1,
      4,
      0,
      0,
      0,
      16,
      17,
      16,
      30,
      31,
      29,
      1,
      2,
      21,
      0,
      4,
      22,
      15,
      23,
      1,
      2,
      0,
      4,
      32,
      0,
      4,
      1,
      32,
      0,
      4,
      33,
      34,
      0,
      33,
      1,
      35,
      21,
      0,
      4,
      22,
      0,
      4,
      0,
      4,
      0,
      0,
      0,
      0,
      0,
      0,
      4,
      36,
      0,
      4,
      1,
      35,
      21,
      0,
      4,
      22,
      0,
      4,
      0,
      4,
      0,
      0,
      0,
      0,
      0,
      4,
      37,
      0,
      4,
      0,
      4,
      38,
      0,
      4,
    |],
  ]):
    array(int)
);

let _htmlstream_eof_actions: array(int) = (
  Array.concat([
    [|
      0,
      3,
      5,
      0,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      18,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      26,
      5,
      5,
      29,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
    |],
  ]):
    array(int)
);

let htmlstream_start: int = (0: int);
let htmlstream_first_final: int = (0: int);
let htmlstream_error: int = ((-1): int);

let htmlstream_en_in_script: int = (41: int);
let htmlstream_en_in_style: int = (52: int);
let htmlstream_en_garbage_tag: int = (62: int);
let htmlstream_en_main: int = (0: int);

type _htmlstream_state = {
  mutable keys: int,
  mutable trans: int,
};
exception Goto_match_htmlstream;
exception Goto_again_htmlstream;
exception Goto_eof_trans_htmlstream;
/** scan [data] for html tags and invoke [call] for every element  */

let parse = (~ctx=init(), call, data) => {
  let cs = ref(0);
  let mark = ref(-1);
  let mark_end = ref(-1);
  let tag = ref("")
  and key = ref("")
  and attrs = ref([])
  and directive = ref("");
  /*  let substr data ofs len = try String.sub data ofs len with exn -> Prelude.printfn "%S %d %d %d" data (String.length data) ofs len; raise exn in */
  let substr = String.sub;

  cs.contents = htmlstream_start;
  let eof = ref(String.length(data));
  let p = ref(0);
  let pe = ref(String.length(data));
  let sub = () => {
    assert(mark^ >= 0);
    if (mark_end^ < 0) {
      mark_end := p^;
    };
    let s =
      if (mark_end^ <= mark^) {
        "";
      } else {
        substr(data, mark^, mark_end^ - mark^);
      };
    mark := (-1);
    mark_end := (-1);
    s;
  };

  {
    let state = {keys: 0, trans: 0};
    let rec do_start = () =>
      if (p.contents == pe.contents) {
        do_test_eof();
      } else {
        do_resume();
      }
    and do_resume = () => {
      try({
        let keys = cs.contents lsl 1;
        let inds = _htmlstream_index_offsets[cs.contents];

        let slen = _htmlstream_key_spans[cs.contents];
        state.trans = _htmlstream_indicies[inds
                                           + (
                                             if (slen > 0
                                                 && _htmlstream_trans_keys[keys]
                                                 <= Char.code(
                                                      data.[p.contents],
                                                    )
                                                 && Char.code(
                                                      data.[p.contents],
                                                    )
                                                 <= _htmlstream_trans_keys[keys
                                                                    + 1]) {
                                               Char.code(data.[p.contents])
                                               - _htmlstream_trans_keys[keys];
                                             } else {
                                               slen;
                                             }
                                           )];
      }) {
      | Goto_match_htmlstream => ()
      };
      do_eof_trans();
    }
    and do_eof_trans = () => {
      cs.contents = _htmlstream_trans_targs[state.trans];

      try(
        {
          if (_htmlstream_trans_actions[state.trans] == 0) {
            raise_notrace(Goto_again_htmlstream);
          };

          switch (_htmlstream_trans_actions[state.trans]) {

          | 1 =>
            mark := p^;
            ();
          | 22 =>
            mark_end := p^;
            ();
          | 24 =>
            {
              tag := String.lowercase_ascii @@ sub();
              attrs := [];
            };
            ();
          | 33 =>
            call @@ Close(String.lowercase_ascii @@ sub());
            ();
          | 9 =>
            {
              directive := String.lowercase_ascii @@ sub();
              attrs := [];
            };
            ();
          | 3 =>
            call @@ Text(Raw.inject @@ sub());
            ();
          | 11 =>
            key := String.lowercase_ascii @@ sub();
            ();
          | 15 =>
            attrs :=
              [
                (
                  key^,
                  Raw.inject(
                    if (mark^ < 0) {
                      "";
                    } else {
                      sub();
                    },
                  ),
                ),
                ...attrs^,
              ];
            ();
          | 29 =>
            switch (tag^) {
            | "script" =>
              p.contents = p.contents - 1;
              cs.contents = 41;
              if (true) {
                raise_notrace(Goto_again_htmlstream);
              };
            | "style" =>
              p.contents = p.contents - 1;
              cs.contents = 52;
              if (true) {
                raise_notrace(Goto_again_htmlstream);
              };
            | "" => ()
            | _ => call @@ [@implicit_arity] Tag(tag^, List.rev(attrs^))
            };
            ();
          | 26 =>
            {
              call @@ [@implicit_arity] Tag(tag^, List.rev(attrs^));
              if (tag^ != "a") {
                call(Close(tag^));
              };
            };
            ();
          | 18 =>
            () /* printfn "directive %s" !directive; */;
            ();
          | 5 =>
            {
              /*printfn "GARBAGE %S" (current ()); */ p.contents =
                p.contents - 1;
              cs.contents = 62;
              if (true) {
                raise_notrace(Goto_again_htmlstream);
              };
            };
            ();
          | 4 =>
            ctx.lnum = ctx.lnum + 1;
            ();
          | 6 =>
            tag := "";
            ();
          | 21 =>
            mark := p^;
            mark_end := p^;
            ();
          | 32 =>
            mark := p^;

            call @@ Close(String.lowercase_ascii @@ sub());
            ();
          | 2 =>
            mark := p^;

            ctx.lnum = ctx.lnum + 1;
            ();
          | 16 =>
            mark_end := p^;

            attrs :=
              [
                (
                  key^,
                  Raw.inject(
                    if (mark^ < 0) {
                      "";
                    } else {
                      sub();
                    },
                  ),
                ),
                ...attrs^,
              ];
            ();
          | 25 =>
            {
              tag := String.lowercase_ascii @@ sub();
              attrs := [];
            };

            ctx.lnum = ctx.lnum + 1;
            ();
          | 34 =>
            call @@ Close(String.lowercase_ascii @@ sub());

            ctx.lnum = ctx.lnum + 1;
            ();
          | 10 =>
            {
              directive := String.lowercase_ascii @@ sub();
              attrs := [];
            };

            ctx.lnum = ctx.lnum + 1;
            ();
          | 13 =>
            key := String.lowercase_ascii @@ sub();
            attrs :=
              [
                (
                  key^,
                  Raw.inject(
                    if (mark^ < 0) {
                      "";
                    } else {
                      sub();
                    },
                  ),
                ),
                ...attrs^,
              ];
            ();
          | 12 =>
            key := String.lowercase_ascii @@ sub();

            ctx.lnum = ctx.lnum + 1;
            ();
          | 14 =>
            attrs :=
              [
                (
                  key^,
                  Raw.inject(
                    if (mark^ < 0) {
                      "";
                    } else {
                      sub();
                    },
                  ),
                ),
                ...attrs^,
              ];
            mark := p^;
            ();
          | 23 =>
            attrs :=
              [
                (
                  key^,
                  Raw.inject(
                    if (mark^ < 0) {
                      "";
                    } else {
                      sub();
                    },
                  ),
                ),
                ...attrs^,
              ];

            ctx.lnum = ctx.lnum + 1;
            ();
          | 30 =>
            switch (tag^) {
            | "script" =>
              p.contents = p.contents - 1;
              cs.contents = 41;
              if (true) {
                raise_notrace(Goto_again_htmlstream);
              };
            | "style" =>
              p.contents = p.contents - 1;
              cs.contents = 52;
              if (true) {
                raise_notrace(Goto_again_htmlstream);
              };
            | "" => ()
            | _ => call @@ [@implicit_arity] Tag(tag^, List.rev(attrs^))
            };
            mark := p^;
            ();
          | 38 =>
            switch (tag^) {
            | "script" =>
              p.contents = p.contents - 1;
              cs.contents = 41;
              if (true) {
                raise_notrace(Goto_again_htmlstream);
              };
            | "style" =>
              p.contents = p.contents - 1;
              cs.contents = 52;
              if (true) {
                raise_notrace(Goto_again_htmlstream);
              };
            | "" => ()
            | _ => call @@ [@implicit_arity] Tag(tag^, List.rev(attrs^))
            };

            {
              cs.contents = 0;
              if (true) {
                raise_notrace(Goto_again_htmlstream);
              };
            };
            ();
          | 27 =>
            {
              call @@ [@implicit_arity] Tag(tag^, List.rev(attrs^));
              if (tag^ != "a") {
                call(Close(tag^));
              };
            };
            mark := p^;
            ();
          | 19 =>
            () /* printfn "directive %s" !directive; */;
            mark := p^;
            ();
          | 8 =>
            {
              /*printfn "GARBAGE %S" (current ()); */ p.contents =
                p.contents - 1;
              cs.contents = 62;
              if (true) {
                raise_notrace(Goto_again_htmlstream);
              };
            };

            ctx.lnum = ctx.lnum + 1;
            ();
          | 35 =>
            ctx.lnum = ctx.lnum + 1;
            mark := p^;
            ();
          | 36 =>
            call @@ [@implicit_arity] Script(List.rev(attrs^), sub());
            {
              cs.contents = 0;
              if (true) {
                raise_notrace(Goto_again_htmlstream);
              };
            };
            ();
          | 37 =>
            call @@ [@implicit_arity] Style(List.rev(attrs^), sub());
            {
              cs.contents = 0;
              if (true) {
                raise_notrace(Goto_again_htmlstream);
              };
            };
            ();
          | 7 =>
            tag := "";
            mark := p^;
            ();
          | 17 =>
            mark_end := p^;

            attrs :=
              [
                (
                  key^,
                  Raw.inject(
                    if (mark^ < 0) {
                      "";
                    } else {
                      sub();
                    },
                  ),
                ),
                ...attrs^,
              ];

            ctx.lnum = ctx.lnum + 1;
            ();
          | 31 =>
            switch (tag^) {
            | "script" =>
              p.contents = p.contents - 1;
              cs.contents = 41;
              if (true) {
                raise_notrace(Goto_again_htmlstream);
              };
            | "style" =>
              p.contents = p.contents - 1;
              cs.contents = 52;
              if (true) {
                raise_notrace(Goto_again_htmlstream);
              };
            | "" => ()
            | _ => call @@ [@implicit_arity] Tag(tag^, List.rev(attrs^))
            };
            mark := p^;

            ctx.lnum = ctx.lnum + 1;
            ();
          | 28 =>
            {
              call @@ [@implicit_arity] Tag(tag^, List.rev(attrs^));
              if (tag^ != "a") {
                call(Close(tag^));
              };
            };
            mark := p^;

            ctx.lnum = ctx.lnum + 1;
            ();
          | 20 =>
            () /* printfn "directive %s" !directive; */;
            mark := p^;

            ctx.lnum = ctx.lnum + 1;
            ();

          | _ => ()
          };
        }
      ) {
      | Goto_again_htmlstream => ()
      };

      do_again();
    }
    and do_again = () => {
      p.contents = p.contents + 1;
      if (p.contents != pe.contents) {
        do_resume();
      } else {
        do_test_eof();
      };
    }
    and do_test_eof = () =>
      if (p.contents == eof.contents) {
        try(
          switch (_htmlstream_eof_actions[cs.contents]) {

          | 3 =>
            call @@ Text(Raw.inject @@ sub());
            ();
          | 29 =>
            switch (tag^) {
            | "script" =>
              p.contents = p.contents - 1;
              cs.contents = 41;
              if (true) {
                raise_notrace(Goto_again_htmlstream);
              };
            | "style" =>
              p.contents = p.contents - 1;
              cs.contents = 52;
              if (true) {
                raise_notrace(Goto_again_htmlstream);
              };
            | "" => ()
            | _ => call @@ [@implicit_arity] Tag(tag^, List.rev(attrs^))
            };
            ();
          | 26 =>
            {
              call @@ [@implicit_arity] Tag(tag^, List.rev(attrs^));
              if (tag^ != "a") {
                call(Close(tag^));
              };
            };
            ();
          | 18 =>
            () /* printfn "directive %s" !directive; */;
            ();
          | 5 =>
            {
              /*printfn "GARBAGE %S" (current ()); */ p.contents =
                p.contents - 1;
              cs.contents = 62;
              if (true) {
                raise_notrace(Goto_again_htmlstream);
              };
            };
            ();

          | _ => ()
          }
        ) {
        | Goto_again_htmlstream => do_again()
        | Goto_eof_trans_htmlstream => do_eof_trans()
        };
      };

    do_start();
  };
  /* FIXME ? */
  /*     if !eof <> -1 && !cs < htmlstream_first_final then Exn.fail "not parsed"; */
  ();
};

// vim: ft=ocaml
